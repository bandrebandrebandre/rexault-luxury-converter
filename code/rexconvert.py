#!/usr/bin/env python2.7

from scipy import misc as MSC
import os, sys
from PIL import Image
import math
from halftone import halftone

save_path = "output/"

def find_good_channel(image):
    """
    greyscale is fucking wtf
    """
    for y in range(1, image.shape[0]):
        for x in range(1, image.shape[1]):
            if image[y][x][0] != image[y][x-1][0]:
                return 0
            if image[y][x][0] != image[y-1][x][0]:
                return 0

    for y in range(1, image.shape[0]):
        for x in range(1, image.shape[1]):
            if image[y][x][1] != image[y][x-1][1]:
                return 1
            if image[y][x][1] != image[y-1][x][1]:
                return 1


def hexify(path, threshold):

    image_name = path.replace("source_images/", '').replace(".png", '')
    if not os.path.exists("output/" + image_name):
        os.makedirs("output/" + image_name)
    out_path = "output/" + image_name + "/"

    code = '#include "%s.h"\r#include <avr/pgmspace.h>\r\r\rconst unsigned char %s[] PROGMEM = {\r/* Generated by reXconvert */\r' % (image_name, image_name,)
    
    imgrey = Image.open(path, 'r').convert("LA")
    imgrey.save(out_path + "greyified_" + image_name +'.png', "PNG")
    image = MSC.imread(out_path + "greyified_" + image_name + ".png")
    bin_array = [[] for i in range(image.shape[0])]

    chan = find_good_channel(image)
                
    for y in range(0, image.shape[0]):
        bin_array[y] = ""
        for x in range(0, image.shape[1]):
            if image[y][x][chan] < threshold:
                image[y][x][chan] = 0
                bin_array[y] += "0"
            else: 
                image[y][x][chan] = 255
                bin_array[y] += "1"
           

        for x in range (0, 8 % image.shape[0]):
            bin_array[y] += "0"




    row_size_in_bytes = int(math.ceil(float(image.shape[1]) / 8))
    byte_counter = 0

    for y in range(0, len(bin_array)):
        bin_temp = ""
        for byte in range(0, row_size_in_bytes):
            hexified = hex(int(bin_array[y][(byte * 8):((byte+1) * 8)], 2)).upper()
            bin_temp += bin_array[y][(byte * 8):((byte+1) * 8)] + " "
            if len(hexified) == 3:
                hexified = hexified[:2] + '0' + hexified[2:]
            code += hexified
            code += ","
            byte_counter += 1
            if byte_counter == 16:
                code += "\r"
                byte_counter = 0
        print bin_temp

    # pad so  it has a multiple of 8 bytes
    for remaining_pad in range(0, 8 % (len(bin_array))):
        code += '0XFF,'


    if code[:1] != '\r':
        code += '\r'      
    code += '};'
    with open(out_path  + image_name + ".cpp", 'w') as hexy_out:
        hexy_out.write(code)

    Image.fromarray(image).save(out_path + "hexified_threshold=%i" % threshold + "_" + image_name + ".png")

    with open(out_path + image_name + ".h", "w") as header_out:
        header_out.write('extern const unsigned char %s[];' % image_name)



def blackandwhiteify(path, threshold=200):
    image_name = path.replace("source_images/", '').replace(".png", '')
    if not os.path.exists("output/" + image_name):
        os.makedirs("output/" + image_name)
    out_path = "output/" + image_name + "/"

    imgrey = Image.open(path, 'r').convert("LA")
    imgrey.save(out_path + "greyified_" + image_name +'.png', "PNG")
    image = MSC.imread(out_path + "greyified_" + image_name + ".png")

    for y in range(0, image.shape[0]):
        for x in range(0, image.shape[1]):
            if int(image[y][x][0]) > int(threshold):
                image[y][x][0] = 0
            else: 
                image[y][x][0] = 255
    Image.fromarray(image).save(out_path + "blackandwhiteified_threshold=" + str(threshold) + "_" + image_name + '.png')        


def greyify(path):
    image_name = path.replace("source_images/", '').replace(".png", '')
    if not os.path.exists("output/" + image_name):
        os.makedirs("output/" + image_name)
    out_path = "output/" + image_name + "/"

    im = Image.open(path, 'r')
    greyim = im.convert("LA") # greyscale
    greyim.save(out_path + "greyified_" + image_name + ".png", "PNG")


def halftoneify(path, sample=3, scale=1):
    image_name = path.replace("source_images/", '').replace(".png", '')
    if not os.path.exists("output/" + image_name):
        os.makedirs("output/" + image_name)
    out_path = "output/" + image_name + "/"

    h = halftone.Halftone(path)
    h.make(filename_addition='temp', style='grayscale', sample=sample, scale=scale)
    os.rename(path.replace(".png", "temp.png"), out_path + "halftoneified_sample=%i_scale=%i" % (sample, scale,) + ".png")


def shrinkify(path, width, height):
    size = width, height
    im = Image.open(path)
    im.thumbnail(size, Image.ANTIALIAS)
    im.save(image_name, "PNG")



if __name__ == "__main__":
    function = sys.argv[1]
    path = sys.argv[2]
    if function == "hexify":
        try:
            threshold = sys.argv[3]
        except:
            threshold = 127
        hexify(path, int(threshold))
    if function == "shrinkify":
        shrinkify(path)
    if function == "halftoneify":
        try:
            sample = sys.argv[3]
        except:
            sample = 5
        try: 
            scale = sys.argv[4]
        except:
            scale = 1   
        halftoneify(path, int(sample), int(scale))
    if function == "blackandwhiteify":
        try:
            threshold = sys.argv[3]
        except:
            threshold = 127
        blackandwhiteify(path, threshold)
    if function == "greyify":
        greyify(path)

